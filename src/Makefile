CXX     = g++
# mark mpi as isystem to avoid a shitload of errors -.-
INCLUDE = -I . -I ./libs
#    -isystem $(MPI_ROOT)/include
CWFLAGS = -Weffc++ -pedantic  \
    -pedantic-errors -Wextra -Wcast-align \
    -Wcast-qual  -Wchar-subscripts  -Wcomment -Wconversion \
    -Wdisabled-optimization \
    -Werror -Wformat \
    -Wformat-nonliteral -Wformat-security  \
    -Wformat-y2k -Wimport  -Winit-self  -Winline \
    -Winvalid-pch -Wno-long-long \
    -Wunsafe-loop-optimizations -Wmissing-braces \
    -Wmissing-field-initializers -Wmissing-format-attribute   \
    -Wmissing-include-dirs -Wmissing-noreturn \
    -Wpacked -Wparentheses -Wpointer-arith \
    -Wredundant-decls -Wreturn-type \
    -Wsequence-point  -Wshadow -Wsign-compare  -Wstack-protector \
    -Wstrict-aliasing -Wstrict-aliasing=2 -Wswitch \
    -Wswitch-enum -Wtrigraphs  -Wuninitialized \
    -Wunknown-pragmas -Wunreachable-code \
    -Wunused-function -Wunused-label -Wno-unused-parameter \
    -Wunused-value -Wno-unused-variable -Wvariadic-macros \
    -Wvolatile-register-var  -Wwrite-strings \
    -Wno-unused-variable
# -Waggregate-return # wtf, too many warnings
# -Wunused-variable  # happens with parameter files
# -Wunused-parameter # needed for some operator() which don't use parameter
# -Wswitch-default   # too often I don't want a default switch (i know, security)
# -Wpadded      # don't know what to do with those. Why do they matter anyway
# -Wfloat-equal # these are wanted comparisons, because I know how float workgs!
LIBS    = -lboost_system -lboost_filesystem
CFLAGS  = $(INCLUDE) -m64 -std=c++11 -Wall $(CWFLAGS) -g -O0 -Wno-unused-variable $(LIBS)


#The phony target will cease to work if anything ever does create a file named ‘clean’ in this directory. Since it has no prerequisites, the file ‘clean’ would inevitably be considered up to date, and its recipe would not be executed. To avoid this problem, you can explicitly declare the target to be phony, using the special target .PHONY
.PHONY: all clean

all : libpngwriter testOctree testMatrix MainYee MainYeeOctreeNoDebug OctreeBenchmark opengl-example

libpngwriter:
	cd pngwriter; make all

TVector : libs/math/TVector.tpp libs/math/TVector.h

TBaseMatrix : libs/math/TBaseMatrix.h

Octree : libs/octree/OctreeNode.h libs/octree/OctreeNode.tpp libs/octree/OctreeToSvg.h libs/octree/OctreeToSvg.tpp

testOctree  : examples/testOctree.cpp TVector Octree
	rm -f $@.exe
	g++ $< -o $@.exe $(CFLAGS)

testOctree2 : examples/testOctree2.cpp TVector Octree
	rm -f $@.exe
	g++ $< -o $@.exe $(CFLAGS)

ShowSFCRefinemt : examples/ShowSFCRefinemt.cpp TVector Octree
	rm -f $@.exe
	g++ $< -o $@.exe $(CFLAGS)

OctreeBenchmark : examples/testOctree2.cpp TVector Octree
	rm -f $@.exe
	g++ $< -o $@.exe $(INCLUDE) -DNDEBUG -std=c++11 -Wall -O3 -Wno-unused-variable $(LIBS) -fopenmp

testMatrix  : examples/testMatrix.cpp TBaseMatrix TVector
	rm -f $@.exe
	g++ $< -o $@.exe $(CFLAGS)

MainYee : yeesolver/MainYee.cpp yeesolver/YeeCell.h libpngwriter
	mkdir -p output
	rm -f $@.exe
	mpic++ $< -o $@.exe $(CFLAGS) -DNO_FREETYPE -I ./pngwriter -L ./pngwriter -lz -lpngwriter -lpng

MainYeeOctree : yeesolver/MainYeeOctree.cpp yeesolver/YeeCell.h Octree libpngwriter
	mkdir -p output
	rm -f $@.exe
	mpic++ $< -o $@.exe $(CFLAGS) -DNO_FREETYPE -I ./pngwriter -L ./pngwriter $(LIBS) -lz -lpngwriter -lpng

MainYeeOctreeNoDebug : yeesolver/MainYeeOctree.cpp yeesolver/YeeCell.h Octree libpngwriter
	mkdir -p output
	rm -f $@.exe
	mpic++ $< -o $@.exe $(INCLUDE) -DNDEBUG -Wall -Wno-unused-variable -std=c++0x -O3 $(LIBS) -DNO_FREETYPE -I ./pngwriter -L ./pngwriter -lz -lpngwriter -lpng

MainYeeOctreeNoMpi : yeesolverserial/MainYeeOctree.cpp
	mkdir -p output
	rm -f $@.exe
	mpic++ $< -o $@.exe $(INCLUDE) -DNDEBUG -Wall -Wno-unused-variable -std=c++0x -O3 $(LIBS) -DNO_FREETYPE -I ./pngwriter -L ./pngwriter -lz -lpngwriter -lpng

testSimBox : examples/testSimBox/Main.cpp examples/testSimBox/Communicator.h examples/testSimBox/Cell.h TVector TBaseMatrix
	rm -f $@.exe
	mpic++ $< -o $@.exe $(CFLAGS)

# -D... Are Macro-Definitions... for what?
# -g3: Request debugging information and also use level to specify how much information. Level 3 includes extra information, such as all the macro definitions present in the program.
# -mwindows: This option is available for Cygwin and MinGW targets. It specifies that a GUI application is to be generated by instructing the linker to set the PE header subsystem type appropriately. (suppress console)
# NDEBUG: The ANSI assert macro is typically used to identify logic errors during program development, by implementing the expression argument to evaluate to false only when the program is operating incorrectly. After debugging is complete, assertion checking can be turned off without modifying the source file by defining the identifier NDEBUG (see also assert.h)

openglexample : opengl/Simulation.c
	gcc $< -o $@.exe -L"./opengl/MinGW/lib/" -lglew32 -lglut -lopengl32 -I"./opengl/MinGW/include/" -Wall -mwindows -m64
	cp ./opengl/*.dll ./opengl/cityandwindmill.obj ./opengl/FragShader.c ./opengl/VertShader.c .


clean:
	cd pngwriter; make clean
	rm -f *.exe
	rm -f *.obj
	rm -f *Shader.c
	rm -f *.dll

animation:
	ffmpeg -i output/Ex_%05d.png -c:v libvpx -crf 4 Ex.webm
	ffmpeg -i output/Ey_%05d.png -c:v libvpx -crf 4 Ey.webm
	ffmpeg -i output/Ez_%05d.png -c:v libvpx -crf 4 Ez.webm
	ffmpeg -i output/Hx_%05d.png -c:v libvpx -crf 4 Hx.webm
	ffmpeg -i output/Hy_%05d.png -c:v libvpx -crf 4 Hy.webm
	ffmpeg -i output/Hz_%05d.png -c:v libvpx -crf 4 Hz.webm
